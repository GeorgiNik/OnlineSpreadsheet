@Html.Partial("_DeleteTemplate")

@{ 
    ViewBag.Title = "Project Files";
}

@Scripts.Render(Bundles.KendoGridFunctions)
@(Html.Kendo().Grid<OnlineSpreadsheet.Web.ViewModels.ProjectFiles.FolderVM>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Template(t => { }).ClientTemplate("<i class='fa fa-folder-o fa-3x white' aria-hidden='true'></i>").Title(string.Empty).Width(30);
            columns.Bound(e => e.Name).Filterable(f => f.Multi(true).Search(true));
            columns.Bound(e => e.CreatedOn).Format("{0:dd/MM/yyyy}").Filterable(f => f.Multi(true).Search(true));
            columns.Bound(e => e.ModifiedOn).Format("{0:dd/MM/yyyy}").Filterable(f => f.Multi(true).Search(true));
            if (ViewBag.User.HasAccess(AccessRequest.ProjectFilesEdit))
            {
                columns.Bound(c => c.ID)
                    .Title(string.Empty)
                    .Filterable(false)
                    .ClientTemplate("<a data-ajax='true' data-ajax-mode='replace' data-ajax-update='\\#modal-container' class='modal-link k-button' href='/ProjectFiles/EditFolder/#=ID#'><i class='fa fa-lg fa-pencil'></i></a>")
                    .Width(15);
                columns.Command(command => command.Custom("Delete").Click("confirmDelete").Text("<i class='fa fa-lg fa-trash-o'></i>")).Width(15);
            }
        })
        .ToolBar(toolbar =>
        {
            if (ViewBag.User.HasAccess(AccessRequest.ProjectFilesEdit))
            {
                toolbar.Template(@<text>
        <span class="grid-manage-label">@Resources.ProjectFiles</span>
        <div class="input-group grid-search">
            <span class="input-group-addon"><i class="fa fa-search"></i></span>
            <input type="text" name="searchbox" class="form-control" id="searchbox" placeholder="@Resources.Search" />
        </div>
        <a data-ajax="true" data-ajax-mode="replace" data-ajax-update="#modal-container" class="modal-link k-button k-grid-add" href="/ProjectFiles/UploadFiles"> @Resources.UploadFiles</a>
        <a data-ajax="true" data-ajax-mode="replace" data-ajax-update="#modal-container" class="modal-link k-button k-grid-add" href="/ProjectFiles/CreateFolder"> @Resources.CreateFolder</a>
        @*<a class='k-button k-button-icontext k-grid-add' href='#'><i class='fa fa-plus'></i> @Resources.CreateFolder</a>*@
                </text>);
            }
        })
        .Selectable(builder => builder.Type(GridSelectionType.Row).Mode(GridSelectionMode.Single))
        .Sortable(sortable =>
        {
            sortable.SortMode(GridSortMode.SingleColumn);
        })
        .Filterable(f => f.Extra(false))
        .Pageable(p => p.PageSizes(new int[] { 10, 20, 50 }))
        .ClientDetailTemplateId("template")
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Model(model =>
            {
                model.Id(p => p.ID);
                model.Field(q => q.CreatedOn).Editable(false);
                model.Field(q => q.ModifiedOn).Editable(false);
            })
            .Read(read => read.Action("Folders_Read", "ProjectFiles"))
            .Destroy(destroy => destroy.Action("Folders_Destroy", "ProjectFiles"))
            )
        .Events(events => events.DataBound("dataBound")).Resizable(x => x.Columns(true))
        .HtmlAttributes(new { @class = "projectFilesGrid" })
)

@Scripts.Render("~/bundles/projectFilesIndex")

<script id="template" type="text/x-kendo-template">
    @(Html.Kendo().Grid<OnlineSpreadsheet.Web.ViewModels.ProjectFiles.FileVM>()
              .Name("grid_#=ID#").HtmlAttributes(new { @class = "child-grid" })
              .Columns(columns =>
                  {
                      columns.Template(@<text> </text>).Title(String.Empty);
                      columns.Bound(o => o.Name).Filterable(f => f.Multi(true).Search(true));
                      columns.Template(@<text> </text>).Title(String.Empty);
                      columns.Bound(o => o.CreatedOn).Format("{0:dd/MM/yyyy}");
                      columns.Bound(o => o.ModifiedOn).Format("{0:dd/MM/yyyy}");
                      if (ViewBag.User.HasAccess(AccessRequest.ProjectFilesEdit))
                      {
                          columns.Bound(c => c.ID)
                                  .Title(string.Empty)
                                  .Filterable(false)
                                  .ClientTemplate("<a class='k-button' href='/Download/ProjectFile/\\#= ID \\#'><i class='fa fa-lg fa-cloud-download'></i></a>")
                                  .Width(15);
                          columns.Bound(c => c.ID)
                                  .Title(string.Empty)
                                  .Filterable(false)
                                  .ClientTemplate("<a data-ajax='true' data-ajax-success='onSuccess(#=ID#)'  class='k-button' href='/ProjectFiles/DeleteFile/\\#= ID \\#'><i class='fa fa-lg fa-trash-o'></i></a>")
                                  .Width(15);
                      }
                  })
              .DataSource(dataSource => dataSource
                                                .Ajax()
                                                .Model(model =>
                                                    {
                                                        model.Id(p => p.ID);
                                                        model.Field(q => q.CreatedOn).Editable(false);
                                                        model.Field(q => q.ModifiedOn).Editable(false);
                                                    })
                                                .Read(read => read.Action("Files_Read", "ProjectFiles", new { fileId = "#= ID #" })))
              .Sortable(sortable =>
                  {
                      sortable.SortMode(GridSortMode.SingleColumn);
                  })
              .Events(events => events.DataBound("childGridBound")).Resizable(x => x.Columns(true)
              )
              .HtmlAttributes(new { @class = "projecFilesDetailsGrid" })
              .ToClientTemplate())

</script>
@Scripts.Render(Bundles.KendoPopupFunctionBindings)

<script type="text/javascript">
    function dataBound() {
        //this.expandRow(this.tbody.find("tr.k-master-row").first());
        $('#grid').find(".k-hierarchy-cell, .k-hierarchy-col").hide();
    }

    function resizeDetailGrid(gridElement) {
        // resize detail column widths to match master column headings
        gridElement.find('.k-detail-cell tbody tr td').each(function (index) {
            var headerCellSelector = kendo.format('.k-master-row td:nth-child({0})', index + 2);
            var detailCellSelector = kendo.format('.k-detail-cell tbody tr td:nth-child({0})', index + 1);
            var headerCell = gridElement.find(headerCellSelector).first();
            var detailCell = gridElement.find(detailCellSelector);
            detailCell.width(headerCell.width());
        });
    }

    function childGridBound() {
        resizeDetailGrid($('#grid'));
        $(".projecFilesDetailsGrid .k-grid-header").css('display', 'none');
    }

    $(function () {
        $('#grid').on("click", "tr", function (e) {
            var $this = $(this);
            var $link = $this.find("td.k-hierarchy-cell .k-icon");
            $link.click();  
            $this.next().find(".k-hierarchy-cell").hide();
        });
    });
</script>


